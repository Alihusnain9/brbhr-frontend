{
    "sourceFile": "src/components/candidates/JobPostingsList.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1705685067446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705728903238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n                     <Divider my={2} />\n                     <Text>Position: {posting.jobPosition}</Text>\n                     <Text>Manager: {posting.recruitingManager}</Text>\n                     <Text>Vacancies: {posting.vacancy}</Text>\n+                    \n                     {/* More details */}\n                 </Box>\n             ))}\n         </VStack>\n"
                },
                {
                    "date": 1705728922616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n \n const JobPostingsList = () => {\n     const [jobPostings, setJobPostings] = useState([]);\n \n+    \n+\n     useEffect(() => {\n         const fetchJobPostings = async () => {\n             try {\n                 const postings = await getAllJobPostings();\n@@ -28,9 +30,9 @@\n                     <Divider my={2} />\n                     <Text>Position: {posting.jobPosition}</Text>\n                     <Text>Manager: {posting.recruitingManager}</Text>\n                     <Text>Vacancies: {posting.vacancy}</Text>\n-                    \n+                    <Button colorScheme=\"blue\" onClick={() => handleAddStageClick(posting.id)}>+ Add Stage</Button>\n                     {/* More details */}\n                 </Box>\n             ))}\n         </VStack>\n"
                },
                {
                    "date": 1705728934159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,8 @@\n \n const JobPostingsList = () => {\n     const [jobPostings, setJobPostings] = useState([]);\n \n-    \n-\n     useEffect(() => {\n         const fetchJobPostings = async () => {\n             try {\n                 const postings = await getAllJobPostings();\n"
                },
                {
                    "date": 1705729127658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,12 @@\n import { getAllJobPostings } from '../../services/CandidateService';\n \n const JobPostingsList = () => {\n     const [jobPostings, setJobPostings] = useState([]);\n+    const { isOpen, onOpen, onClose } = useDisclosure();\n+    const [selectedJobPostingId, setSelectedJobPostingId] = useState(null);\n \n+\n     useEffect(() => {\n         const fetchJobPostings = async () => {\n             try {\n                 const postings = await getAllJobPostings();\n@@ -17,8 +20,13 @@\n \n         fetchJobPostings();\n     }, []);\n \n+    const handleAddStageClick = (jobPostingId) => {\n+        // Logic to handle stage addition\n+        console.log(\"Add stage to Job Posting ID:\", jobPostingId);\n+    };\n+\n     return (\n         <VStack spacing={4} p={4}>\n             {jobPostings.map(posting => (\n                 <Box key={posting.id} p={4} shadow=\"md\" borderWidth=\"1px\">\n"
                },
                {
                    "date": 1705729162392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n         fetchJobPostings();\n     }, []);\n \n     const handleAddStageClick = (jobPostingId) => {\n-        // Logic to handle stage addition\n-        console.log(\"Add stage to Job Posting ID:\", jobPostingId);\n+        setSelectedJobPostingId(jobPostingId);\n+        onOpen();\n     };\n \n     return (\n         <VStack spacing={4} p={4}>\n"
                },
                {
                    "date": 1705729266357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,11 @@\n                     <Text>Position: {posting.jobPosition}</Text>\n                     <Text>Manager: {posting.recruitingManager}</Text>\n                     <Text>Vacancies: {posting.vacancy}</Text>\n                     <Button colorScheme=\"blue\" onClick={() => handleAddStageClick(posting.id)}>+ Add Stage</Button>\n-                    {/* More details */}\n+                    <Modal isOpen={isOpen} onClose={onClose}>\n+                <StageForm jobPostingId={selectedJobPostingId} onStageAdded={onClose} />\n+            </Modal>\n                 </Box>\n             ))}\n         </VStack>\n     );\n"
                },
                {
                    "date": 1705729301282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n     const handleAddStageClick = (jobPostingId) => {\n         setSelectedJobPostingId(jobPostingId);\n         onOpen();\n     };\n+    \n \n     return (\n         <VStack spacing={4} p={4}>\n             {jobPostings.map(posting => (\n"
                },
                {
                    "date": 1705729321403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from 'react';\n import { Box, VStack, Text, Divider } from '@chakra-ui/react';\n-import { getAllJobPostings } from '../../services/CandidateService';\n+import { getAllJobPostings ,addStageToJobPosting} from '../../services/CandidateService';\n \n const JobPostingsList = () => {\n     const [jobPostings, setJobPostings] = useState([]);\n     const { isOpen, onOpen, onClose } = useDisclosure();\n@@ -24,8 +24,20 @@\n     const handleAddStageClick = (jobPostingId) => {\n         setSelectedJobPostingId(jobPostingId);\n         onOpen();\n     };\n+\n+    const handleSubmit = async (e) => {\n+        e.preventDefault();\n+        try {\n+            // Assuming you have a service function to add a stage\n+            await addStageToJobPosting(jobPostingId, stage);\n+            console.log(\"Stage added to job posting.\");\n+            onStageAdded(); // Refresh the list or update UI\n+        } catch (error) {\n+            console.error('Error adding stage:', error);\n+        }\n+    };\n     \n \n     return (\n         <VStack spacing={4} p={4}>\n"
                },
                {
                    "date": 1705729509951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import React, { useState, useEffect } from 'react';\n-import { Box, VStack, Text, Divider } from '@chakra-ui/react';\n-import { getAllJobPostings ,addStageToJobPosting} from '../../services/CandidateService';\n+import { Box, VStack, Text, Divider, Button, Modal, useDisclosure } from '@chakra-ui/react';\n+import { getAllJobPostings } from '../../services/CandidateService';\n+import StageForm from './StageForm'; // Ensure this import is correct\n \n const JobPostingsList = () => {\n     const [jobPostings, setJobPostings] = useState([]);\n     const { isOpen, onOpen, onClose } = useDisclosure();\n     const [selectedJobPostingId, setSelectedJobPostingId] = useState(null);\n \n-\n     useEffect(() => {\n         const fetchJobPostings = async () => {\n             try {\n                 const postings = await getAllJobPostings();\n@@ -16,47 +16,30 @@\n             } catch (error) {\n                 console.error('Error fetching job postings:', error);\n             }\n         };\n-\n         fetchJobPostings();\n     }, []);\n \n     const handleAddStageClick = (jobPostingId) => {\n         setSelectedJobPostingId(jobPostingId);\n         onOpen();\n     };\n \n-    const handleSubmit = async (e) => {\n-        e.preventDefault();\n-        try {\n-            // Assuming you have a service function to add a stage\n-            await addStageToJobPosting(jobPostingId, stage);\n-            console.log(\"Stage added to job posting.\");\n-            onStageAdded(); // Refresh the list or update UI\n-        } catch (error) {\n-            console.error('Error adding stage:', error);\n-        }\n-    };\n-    \n-\n     return (\n         <VStack spacing={4} p={4}>\n             {jobPostings.map(posting => (\n                 <Box key={posting.id} p={4} shadow=\"md\" borderWidth=\"1px\">\n                     <Text fontWeight=\"bold\">{posting.title}</Text>\n-                    <Text mt={2}>{posting.description}</Text>\n-                    {/* Display other job posting details */}\n+                    {/* Other job posting details */}\n                     <Divider my={2} />\n-                    <Text>Position: {posting.jobPosition}</Text>\n-                    <Text>Manager: {posting.recruitingManager}</Text>\n-                    <Text>Vacancies: {posting.vacancy}</Text>\n+                    {/* Displaying additional details */}\n                     <Button colorScheme=\"blue\" onClick={() => handleAddStageClick(posting.id)}>+ Add Stage</Button>\n-                    <Modal isOpen={isOpen} onClose={onClose}>\n+                </Box>\n+            ))}\n+            <Modal isOpen={isOpen} onClose={onClose}>\n                 <StageForm jobPostingId={selectedJobPostingId} onStageAdded={onClose} />\n             </Modal>\n-                </Box>\n-            ))}\n         </VStack>\n     );\n };\n \n"
                },
                {
                    "date": 1705730045738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n         fetchJobPostings();\n     }, []);\n \n     const handleAddStageClick = (jobPostingId) => {\n+        console.log(\"Opening modal for job posting ID:\", jobPostingId);\n+\n         setSelectedJobPostingId(jobPostingId);\n         onOpen();\n     };\n \n"
                },
                {
                    "date": 1705730194361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n     }, []);\n \n     const handleAddStageClick = (jobPostingId) => {\n         console.log(\"Opening modal for job posting ID:\", jobPostingId);\n-\n         setSelectedJobPostingId(jobPostingId);\n         onOpen();\n     };\n \n@@ -38,10 +37,18 @@\n                     <Button colorScheme=\"blue\" onClick={() => handleAddStageClick(posting.id)}>+ Add Stage</Button>\n                 </Box>\n             ))}\n             <Modal isOpen={isOpen} onClose={onClose}>\n-                <StageForm jobPostingId={selectedJobPostingId} onStageAdded={onClose} />\n-            </Modal>\n+    <ModalOverlay />\n+    <ModalContent>\n+        <ModalHeader>Add Stage</ModalHeader>\n+        <ModalCloseButton />\n+        <ModalBody>\n+            <StageForm jobPostingId={selectedJobPostingId} onStageAdded={onClose} />\n+        </ModalBody>\n+    </ModalContent>\n+</Modal>\n+\n         </VStack>\n     );\n };\n \n"
                },
                {
                    "date": 1705730226627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\n-import { Box, VStack, Text, Divider, Button, Modal, useDisclosure } from '@chakra-ui/react';\n+import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay } from '@chakra-ui/react';\n import { getAllJobPostings } from '../../services/CandidateService';\n import StageForm from './StageForm'; // Ensure this import is correct\n \n const JobPostingsList = () => {\n"
                },
                {
                    "date": 1705730236927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\n-import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay } from '@chakra-ui/react';\n+import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent } from '@chakra-ui/react';\n import { getAllJobPostings } from '../../services/CandidateService';\n import StageForm from './StageForm'; // Ensure this import is correct\n \n const JobPostingsList = () => {\n"
                },
                {
                    "date": 1705730246330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\n-import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent } from '@chakra-ui/react';\n+import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent,ModalHeader } from '@chakra-ui/react';\n import { getAllJobPostings } from '../../services/CandidateService';\n import StageForm from './StageForm'; // Ensure this import is correct\n \n const JobPostingsList = () => {\n"
                },
                {
                    "date": 1705730259260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\n-import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent,ModalHeader } from '@chakra-ui/react';\n+import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent,ModalHeader,ModalCloseButton } from '@chakra-ui/react';\n import { getAllJobPostings } from '../../services/CandidateService';\n import StageForm from './StageForm'; // Ensure this import is correct\n \n const JobPostingsList = () => {\n"
                },
                {
                    "date": 1705730281428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\n-import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent,ModalHeader,ModalCloseButton } from '@chakra-ui/react';\n+import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent,ModalHeader,ModalCloseButton ,ModalBody} from '@chakra-ui/react';\n import { getAllJobPostings } from '../../services/CandidateService';\n import StageForm from './StageForm'; // Ensure this import is correct\n \n const JobPostingsList = () => {\n"
                },
                {
                    "date": 1706088751098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,459 @@\n-import React, { useState, useEffect } from 'react';\n-import { Box, VStack, Text, Divider, Button, Modal, useDisclosure,ModalOverlay,ModalContent,ModalHeader,ModalCloseButton ,ModalBody} from '@chakra-ui/react';\n-import { getAllJobPostings } from '../../services/CandidateService';\n-import StageForm from './StageForm'; // Ensure this import is correct\n+import React, { useState, useEffect, useContext } from \"react\";\n+import {\n+  Box,\n+  VStack,\n+  Text,\n+  Divider,\n+  Button,\n+  Modal,\n+  useDisclosure,\n+  ModalOverlay,\n+  ModalContent,\n+  ModalHeader,\n+  ModalCloseButton,\n+  ModalBody,\n+  flexbox,\n+  Table,\n+  Thead,\n+  TabList,\n+  Tbody,\n+  Tr,\n+  Th,\n+  Td,\n+  Select,\n+  Input,\n+} from \"@chakra-ui/react\";\n+import {\n+  getAllJobPostings,\n+  getAllCandidateApplications,\n+  getStagesForJobPosting,\n+  getCurrentStageOfApplication,\n+  updateCandidateStage,\n+} from \"../../services/CandidateService\";\n+import NoteContext from \"../../Context/NoteContext\";\n \n+import { MdOutlineMailOutline } from \"react-icons/md\";\n+import { BsThreeDotsVertical } from \"react-icons/bs\";\n+import StageForm from \"./StageForm\";\n+import SendEmail from \"./SendEmail\";\n+import ApplicationForm from \"./JobPostingForm\";\n const JobPostingsList = () => {\n-    const [jobPostings, setJobPostings] = useState([]);\n-    const { isOpen, onOpen, onClose } = useDisclosure();\n-    const [selectedJobPostingId, setSelectedJobPostingId] = useState(null);\n+  const [stages, setStages] = useState();\n+  const [jobPostings, setJobPostings] = useState([]);\n+  const [allCandidates, setAllCandidates] = useState();\n+  const [selectedJobPostingId, setSelectedJobPostingId] = useState(null);\n+  const [selectedEMail, setSelectedEMail] = useState(null);\n+  const [jobid, setJobId] = useState();\n+  const [jobName, setjobName] = useState();\n+  const [active, setActive] = useState();\n+  const [stg, setstg] = useState();\n+  const [candidateId, setcandidateId] = useState();\n \n-    useEffect(() => {\n-        const fetchJobPostings = async () => {\n-            try {\n-                const postings = await getAllJobPostings();\n-                setJobPostings(postings);\n-            } catch (error) {\n-                console.error('Error fetching job postings:', error);\n-            }\n-        };\n-        fetchJobPostings();\n-    }, []);\n+  const [currentStage, setCurrentStage] = useState();\n+  const abc = useContext(NoteContext);\n+  console.log(stages);\n \n-    const handleAddStageClick = (jobPostingId) => {\n-        console.log(\"Opening modal for job posting ID:\", jobPostingId);\n-        setSelectedJobPostingId(jobPostingId);\n-        onOpen();\n+  const {\n+    isOpen: isOpen1,\n+    onOpen: onOpen1,\n+    onClose: onClose1,\n+  } = useDisclosure();\n+  const {\n+    isOpen: isOpen2,\n+    onOpen: onOpen2,\n+    onClose: onClose2,\n+  } = useDisclosure();\n+  const {\n+    isOpen: isOpen3,\n+    onOpen: onOpen3,\n+    onClose: onClose3,\n+  } = useDisclosure();\n+  const handleAddStageClick = (jobPostingId) => {\n+    console.log(\"Opening modal for job posting ID:\", jobPostingId);\n+    setSelectedJobPostingId(jobPostingId);\n+    onOpen1();\n+  };\n+  const handleSendMailClick = (email) => {\n+    console.log(\"Opening modal for Sending Email\");\n+    setSelectedEMail(email);\n+    onOpen2();\n+  };\n+  const handleNewApplicationClick = () => {\n+    console.log(\"Opening modal for New job posting\");\n+    onOpen3();\n+  };\n+\n+  const fetchJonpostingStages = async (id) => {\n+    const res = await getStagesForJobPosting(id);\n+    setStages(res);\n+  };\n+\n+  const fetchCurrentStage = async (id) => {\n+    try {\n+      const res = await getCurrentStageOfApplication(id);\n+      setCurrentStage(res);\n+      console.log(id);\n+      console.log(res);\n+    } catch (error) {\n+      console.log(\"failed to fetch current stage of\", id, \"due to\", error);\n+    }\n+  };\n+\n+  const updateApplicationStage = (id, stage) => {\n+    try {\n+      const res = updateCandidateStage(id, stage);\n+      console.log(\"ApplicationStage has been updated\", res);\n+    } catch (error) {\n+      \"Failed to update stage of application\", error;\n+    }\n+  };\n+\n+  console.log(allCandidates);\n+\n+  useEffect(() => {\n+    abc.setName(\"RECRUITMENT\");\n+\n+    // setJobId(job.id);\n+    // setjobName(job?.title);\n+    fetchCurrentStage(jobid);\n+\n+    const fetchJobPostings = async () => {\n+      try {\n+        const postings = await getAllJobPostings();\n+        setJobPostings(postings);\n+      } catch (error) {\n+        console.error(\"Error fetching job postings:\", error);\n+      }\n     };\n \n-    return (\n-        <VStack spacing={4} p={4}>\n-            {jobPostings.map(posting => (\n-                <Box key={posting.id} p={4} shadow=\"md\" borderWidth=\"1px\">\n-                    <Text fontWeight=\"bold\">{posting.title}</Text>\n-                    {/* Other job posting details */}\n-                    <Divider my={2} />\n-                    {/* Displaying additional details */}\n-                    <Button colorScheme=\"blue\" onClick={() => handleAddStageClick(posting.id)}>+ Add Stage</Button>\n+    const fetchCandidates = async () => {\n+      try {\n+        const Allcandidates = await getAllCandidateApplications();\n+        setAllCandidates(Allcandidates);\n+      } catch (error) {\n+        console.error(\"Error fetching job postings:\", error);\n+      }\n+      ``;\n+    };\n+    // console.log(allCandidates)\n+\n+    fetchJonpostingStages(jobid);\n+    fetchJobPostings();\n+    fetchCandidates();\n+  }, []);\n+  console.log(jobPostings);\n+\n+  console.log(stages);\n+\n+  return (\n+    <VStack textAlign={\"left\"} spacing={4} py={4} className=\"setPX\" px={6}>\n+      {/* BOX */}\n+      <Box\n+        className=\"changeDir gap \"\n+        mb={\"1rem\"}\n+        display={\"flex\"}\n+        w={\"100%\"}\n+        justifyContent={\"space-between\"}\n+        alignItems={\"center\"}\n+      >\n+        <Text fontWeight={\"bold\"} fontSize={\"1.2rem\"}>\n+          Recruitment\n+        </Text>\n+\n+        <Box display={\"flex\"} gap={\"2\"} alignItems={\"center\"}>\n+          <Input type=\"text\" placeholder=\"search\" borderRadius={\"0\"} />\n+\n+          <Button\n+            // width={'100%'}\n+            className=\"btn\"\n+            borderRadius={0}\n+            fontSize={\"14px\"}\n+            border={\"none\"}\n+            outline={\"none\"}\n+            colorScheme=\"red\"\n+            minWidth={\"max-content\"}\n+            onClick={() => handleNewApplicationClick()}\n+          >\n+            + Recriutment\n+          </Button>\n+        </Box>\n+      </Box>\n+      {/* ... (other JSX code) */}\n+      <Box\n+        className=\"overflow w-100vw\"\n+        w={\"100%\"}\n+        maxWidth={\"100%\"}\n+        border={\".2px solid lightgray\"}\n+      >\n+        <Box className=\"w-50\" spacing={4}>\n+          <Box display={\"flex\"} shadow={\"sm\"} minWidth={\"100%\"} mb={3}>\n+            {/* ********************************************************************* */}\n+            {/* ********************************************************************* */}\n+            {/* ********************************************************************* */}\n+            {jobPostings?.map((job) => {\n+              return (\n+                <Box key={job.id} width={\"100%\"}>\n+                  <Box\n+                    onClick={() => {\n+                      setJobId(job.id);\n+                      setjobName(job?.title);\n+                      fetchJonpostingStages(j);\n+                    }}\n+                    cursor={\"pointer\"}\n+                    display={\"flex\"}\n+                    width={\"100%\"}\n+                    flex={1}\n+                    px={\"5%\"}\n+                    boxShadow={\"sm\"}\n+                    py={1}\n+                    _hover={{ bg: \"rgb(250, 247, 247)\" }}\n+                    bg={\"white\"}\n+                    borderRight={\"1px solid lightgray\"}\n+                    justifyContent={\"space-between\"}\n+                    alignItems={\"center\"}\n+                  >\n+                    <Text fontWeight={\"600\"}>{job?.title}</Text>\n+                    {new Date(job?.postingDate).toLocaleDateString()}\n+                    <Text\n+                      fontSize={\"10px\"}\n+                      borderRadius={\"100px\"}\n+                      width={\"17px\"}\n+                      height={\"17px\"}\n+                      display={\"flex\"}\n+                      justifyContent={\"center\"}\n+                      alignItems={\"center\"}\n+                      textAlign=\"center\"\n+                      color={\"white\"}\n+                      bg={\"red\"}\n+                    >\n+                      {\n+                        allCandidates?.filter(\n+                          (candidate) => candidate.country === job.title\n+                        ).length\n+                      }\n+                    </Text>\n+                  </Box>\n                 </Box>\n-            ))}\n-            <Modal isOpen={isOpen} onClose={onClose}>\n-    <ModalOverlay />\n-    <ModalContent>\n-        <ModalHeader>Add Stage</ModalHeader>\n-        <ModalCloseButton />\n-        <ModalBody>\n-            <StageForm jobPostingId={selectedJobPostingId} onStageAdded={onClose} />\n-        </ModalBody>\n-    </ModalContent>\n-</Modal>\n+              );\n+            })}\n+          </Box>\n+          <Box width={\"100%\"} px={4}>\n+            <Button\n+              marginBottom={\"1rem\"}\n+              colorScheme=\"red\"\n+              borderRadius={\"0\"}\n+              onClick={() => handleAddStageClick(jobid)}\n+            >\n+              + Add Stage\n+            </Button>\n+            {/* STAGE //****************************************/}\n \n-        </VStack>\n-    );\n+            {stages ? (\n+              stages?.map((stage) => {\n+                return (\n+                  <Box\n+                    key={Math.random()}\n+                    width={\"100%\"}\n+                    mb={3}\n+                    border={\"1px solid lightgray\"}\n+                    justifyContent={\"space-between\"}\n+                  >\n+                    {/* ****    STAGE HEADING    */}\n+                    <Box\n+                      display={\"flex\"}\n+                      borderBottom={\"1px solid lightgray\"}\n+                      py={1}\n+                      justifyContent={\"space-between\"}\n+                      px={4}\n+                      w={\"100%\"}\n+                    >\n+                      <Box display={\"flex\"} alignItems={\"center\"} gap={2}>\n+                        <Text\n+                          fontSize={\"10px\"}\n+                          borderRadius={\"100px\"}\n+                          width={\"17px\"}\n+                          height={\"17px\"}\n+                          display={\"flex\"}\n+                          justifyContent={\"center\"}\n+                          alignItems={\"center\"}\n+                          textAlign=\"center\"\n+                          color={\"white\"}\n+                          bg={\"red\"}\n+                        >\n+                          3\n+                        </Text>{\" \"}\n+                        <Text fontSize={\"1rem\"} fontWeight={\"bold\"}>\n+                          {stage.name}\n+                        </Text>\n+                      </Box>\n+                      <Box display={\"flex\"} gap={2} alignItems={\"center\"}>\n+                        <Button\n+                          bg={\"transparent\"}\n+                          color={\"red\"}\n+                          fontSize={\"22px\"}\n+                          outline={\"none\"}\n+                          border={\"1px solid red\"}\n+                        >\n+                          +\n+                        </Button>\n+                        <BsThreeDotsVertical\n+                          cursor={\"pointer\"}\n+                          bg=\"blue\"\n+                          width={\"10px\"}\n+                          height={\"10px\"}\n+                        />\n+                      </Box>\n+                    </Box>\n+                    {/* ****    STAGE BODY    */}\n+                    <Box>\n+                      <Table variant=\"striped\" colorScheme=\"teal\">\n+                        <Thead>\n+                          <Tr>\n+                            <Th>candidate</Th>\n+                            <Th>Email</Th>\n+                            <Th>Job position</Th>\n+                            <Th>Contact</Th>\n+                            <Th>stage</Th>\n+                          </Tr>\n+                        </Thead>\n+                        <Tbody>\n+                          {allCandidates?.map((candidate) =>\n+                            candidate.country === jobName ? (\n+                              <Tr key={candidate.id}>\n+                                <Td>{candidate.applicantName}</Td>\n+                                <Td>{candidate.applicantEmail}</Td>\n+                                <Td>{candidate.country}</Td>\n+                                <Td>{candidate.mobileNumber}</Td>\n+                                <Td>\n+                                  <Select\n+                                    onChange={(e) => { updateApplicationStage(candidate.id,e.target.value)\n+                                      console.log(e.target.value)}}\n+                                  >\n+                                    {stages?.map((stage) => {\n+                                      return (\n+                                        <option\n+                                          key={Math.random()}\n+                                          value={stage.name}\n+                                        >\n+                                          {stage.name}\n+                                        </option>\n+                                      );\n+                                    })}\n+                                  </Select>\n+                                </Td>\n+                                <Td>\n+                                  <MdOutlineMailOutline\n+                                    onClick={() =>\n+                                      handleSendMailClick(\n+                                        candidate.applicantEmail\n+                                      )\n+                                    }\n+                                    cursor={\"pointer\"}\n+                                  />\n+                                </Td>\n+                              </Tr>\n+                            ) : (\n+                              \"\"\n+                            )\n+                          )}\n+                        </Tbody>\n+                      </Table>\n+                    </Box>\n+                  </Box>\n+                );\n+              })\n+            ) : (\n+              <Box>\n+                <Table variant=\"striped\" colorScheme=\"teal\">\n+                  <Thead>\n+                    <Tr>\n+                      <Th>candidate</Th>\n+                      <Th>Email</Th>\n+                      <Th>Job position</Th>\n+                      <Th>Contact</Th>\n+                      <Th>stage</Th>\n+                    </Tr>\n+                  </Thead>\n+                  <Tbody>\n+                    {allCandidates?.map((candidate) =>\n+                      candidate.country === jobName ? (\n+                        <Tr key={Math.random()}>\n+                          <Td>{candidate.applicantName} </Td>\n+                          <Td>{candidate.applicantEmail}</Td>\n+                          <Td>{candidate.country}</Td>\n+                          <Td>{candidate.mobileNumber}</Td>\n+                          <Td>\n+                            <Select\n+                            // onChange={ChangeStage()}\n+                            >\n+                              {stages &&\n+                                stages?.map((stage) => {\n+                                  return (\n+                                    <option\n+                                      key={Math.random()}\n+                                      value={stage.name}\n+                                    >\n+                                      {stage.name}\n+                                    </option>\n+                                  );\n+                                })}\n+                            </Select>\n+                          </Td>\n+                          <Td>\n+                            <MdOutlineMailOutline\n+                              onClick={() =>\n+                                handleSendMailClick(candidate.applicantEmail)\n+                              }\n+                              cursor={\"pointer\"}\n+                            />\n+                          </Td>\n+                        </Tr>\n+                      ) : (\n+                        \"\"\n+                      )\n+                    )}\n+                  </Tbody>\n+                </Table>\n+              </Box>\n+            )}\n+          </Box>\n+        </Box>\n+      </Box>\n+      <Modal isOpen={isOpen1} onClose={onClose1}>\n+        <ModalOverlay />\n+        <ModalContent>\n+          <ModalHeader>Add Stage</ModalHeader>\n+          <ModalCloseButton />\n+          <ModalBody>\n+            <StageForm\n+              jobPostingId={selectedJobPostingId}\n+              onStageAdded={onClose1}\n+            />\n+          </ModalBody>\n+        </ModalContent>\n+      </Modal>\n+\n+      <Modal isOpen={isOpen2} onClose={onClose2}>\n+        <ModalOverlay />\n+        <ModalContent>\n+          <ModalHeader>Send Message</ModalHeader>\n+          <ModalCloseButton />\n+          <ModalBody>\n+            <SendEmail EMailId={selectedEMail} onStageAdded={onClose2} />\n+          </ModalBody>\n+        </ModalContent>\n+      </Modal>\n+      <Modal isOpen={isOpen3} onClose={onClose3}>\n+        <ModalOverlay />\n+        <ModalContent>\n+          {/* <ModalHeader>New-Job Post</ModalHeader> */}\n+          <ModalCloseButton />\n+          <ModalBody>\n+            <ApplicationForm onStageAdded={onClose3} />\n+          </ModalBody>\n+        </ModalContent>\n+      </Modal>\n+    </VStack>\n+  );\n };\n-\n export default JobPostingsList;\n"
                },
                {
                    "date": 1706092357733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n                   <Box\n                     onClick={() => {\n                       setJobId(job.id);\n                       setjobName(job?.title);\n-                      fetchJonpostingStages(j);\n+                      fetchJonpostingStages(job.id);\n                     }}\n                     cursor={\"pointer\"}\n                     display={\"flex\"}\n                     width={\"100%\"}\n"
                }
            ],
            "date": 1705685067446,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport { Box, VStack, Text, Divider } from '@chakra-ui/react';\nimport { getAllJobPostings } from '../../services/CandidateService';\n\nconst JobPostingsList = () => {\n    const [jobPostings, setJobPostings] = useState([]);\n\n    useEffect(() => {\n        const fetchJobPostings = async () => {\n            try {\n                const postings = await getAllJobPostings();\n                setJobPostings(postings);\n            } catch (error) {\n                console.error('Error fetching job postings:', error);\n            }\n        };\n\n        fetchJobPostings();\n    }, []);\n\n    return (\n        <VStack spacing={4} p={4}>\n            {jobPostings.map(posting => (\n                <Box key={posting.id} p={4} shadow=\"md\" borderWidth=\"1px\">\n                    <Text fontWeight=\"bold\">{posting.title}</Text>\n                    <Text mt={2}>{posting.description}</Text>\n                    {/* Display other job posting details */}\n                    <Divider my={2} />\n                    <Text>Position: {posting.jobPosition}</Text>\n                    <Text>Manager: {posting.recruitingManager}</Text>\n                    <Text>Vacancies: {posting.vacancy}</Text>\n                    {/* More details */}\n                </Box>\n            ))}\n        </VStack>\n    );\n};\n\nexport default JobPostingsList;\n"
        }
    ]
}